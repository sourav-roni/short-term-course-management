{
  "name": "Short-term-course-management",
  "tagline": "This repository contains a small application for managing short term courses in an university",
  "body": "The Project named Short_Term_Course_Management contains the required java file\r\nfor the Project. I have implemented the project with the help of three classes \r\nnamely Faculty, Participant and Courses apart from a main class named \r\nCoursemanagement.The faculty class has the fields such as affiliatedDepartment,\r\nfacultyName, facultyAddress, mobile, email which are all Strings.The Participant\r\nclass has fields participantName, participantAddress, participantMobile,\r\nparticipantOrganisation, participantEmail which are all Strings. The Course class\r\nhas the fields of courseName, courseFee, startDate, courseDuration which are Strings.\r\nThe Course class also has an integer field named instructorCount. It also has an \r\nobject of the class Faculty which acts as the Course co-ordinator. Apart from these \r\nthere are two array lists one foe storing instances of Faculty named facultylist \r\nand the other named participantlist for storing instances of the participant class.\r\nApart from all these fields all the above mentioned classes have Scanners which \r\nhave been marked as transient so that the class is serilalizable. The main class\r\nalso declares a scanner and an array list for storing the instances of the course\r\nclass.For every class where there is need to enter mobile number it is checked using\r\nRegular Expressions.\r\n\r\nApart from the above mentioned fields all the class have some or the other method\r\nimplemented. Both faculty and participants have methods defined facultyCreator and\r\nparticipantCreator to initialise instances with user input. There are no restrictions\r\nin the input entered as all the data types used are strings. So the user must be \r\ncareful while entering the inputs as invalid entries would not be checked. The \r\ncourse class also has a courseCreator method for creating instances of Courses.\r\nThe course class also has a method named dateCompare which is used to ensure that \r\nfor a particular year no ,more than 10 courses are created. The dateCompare function \r\nis called from the courseConstructor once the user enters a valid date. Thereafter\r\ndecisions are taken based on the boolean value returned by the method.\r\n\r\nThe main method makes use of Switch cases to execute user choices. There are even \r\ninstances  of nested switches. The options are displayed everytime the loop executes\r\nfor the convenience of the user. The number beside the option corresponds to the \r\ncorrect choice number. Several checks are made to ensure that a course can have \r\natmost 5 faculty as instructors and atmost 5 participants.As far the main class is\r\nconcerned only one main method has been implemented. As the program execution starts \r\nthe stored arraylist of courses is copied from the existing file. After the user\r\ncreates a course or after he creates a faculty, participant  etc the data is written\r\non to the file. Even after deleting the objects appropriate update steps have been \r\ntaken. Not only that in the option for save and exit we save the data into a file\r\nnamed \"shorttermcoursemanagement\" and finally the control goes out of the main program.  \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}